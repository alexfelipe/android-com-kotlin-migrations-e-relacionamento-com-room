// Generated by view binder compiler. Do not edit!
package br.com.alura.orgs.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import br.com.alura.orgs.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProdutoItemBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final TextView produtoItemDescricao;

  @NonNull
  public final TextView produtoItemNome;

  @NonNull
  public final TextView produtoItemValor;

  private ProdutoItemBinding(@NonNull MaterialCardView rootView, @NonNull ImageView imageView,
      @NonNull TextView produtoItemDescricao, @NonNull TextView produtoItemNome,
      @NonNull TextView produtoItemValor) {
    this.rootView = rootView;
    this.imageView = imageView;
    this.produtoItemDescricao = produtoItemDescricao;
    this.produtoItemNome = produtoItemNome;
    this.produtoItemValor = produtoItemValor;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ProdutoItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ProdutoItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.produto_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ProdutoItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imageView;
      ImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.produto_item_descricao;
      TextView produtoItemDescricao = ViewBindings.findChildViewById(rootView, id);
      if (produtoItemDescricao == null) {
        break missingId;
      }

      id = R.id.produto_item_nome;
      TextView produtoItemNome = ViewBindings.findChildViewById(rootView, id);
      if (produtoItemNome == null) {
        break missingId;
      }

      id = R.id.produto_item_valor;
      TextView produtoItemValor = ViewBindings.findChildViewById(rootView, id);
      if (produtoItemValor == null) {
        break missingId;
      }

      return new ProdutoItemBinding((MaterialCardView) rootView, imageView, produtoItemDescricao,
          produtoItemNome, produtoItemValor);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
